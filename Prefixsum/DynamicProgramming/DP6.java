package Prefixsum.DynamicProgramming;

import java.util.Arrays;

public class DP6 {

    static int[][] dp;
    static int solve(int A){
        if(A<=1) return 1; 
        return (A-1)*solve(A-1);
    }

    static int ways(int x,int y){
        if(x==0 || y==0) return 1;
        if(dp[x][y]!=-1) return dp[x][y];
        dp[x][y]=ways(x-1,y)+ways(x, y-1);
        System.out.println(Arrays.toString(dp[x]));
        return dp[x][y];
    }
    public static void main(String[] arg){
        
        int[][] A = {{-96, -67, -67, -97, -59, -47, -35, -62, -12, -13, -51, -44, -2, -58, -52, -69, 8, -17, -12, -20},
            {-65, -23, -12, -94, -89, 0, 3, -25, -81, -67, -91, -86, -28, -33, -62, -72, -56, -73, 0, -68},
            {-95, 8, -86, -88, -40, -32, -40, 6, -73, -56, 3, -2, -68, -83, -67, 8, -17, -92, -47, -57},
            {-54, -65, -37, -5, -49, -36, -43, -32, -45, 6, -29, -67, -36, -2, -98, -10, -7, -98, -61, -24},
            {10, -86, -96, -66, 3, -43, -1, -85, -81, -62, -53, -75, -5, 6, 3, -23, 5, -67, -74, -39},
            {-30, -60, -82, -74, -99, -13, -5, -28, -19, -30, -43, 3, -89, -21, -34, -22, -85, -39, -72, -41},
            {-21, -88, -7, -86, -43, -43, -29, -65, -2, -83, -61, -57, -64, -4, -52, 9, -94, -94, -89, -42},
            {-13, -85, -42, -4, -8, -41, -85, -24, -3, -49, -78, -96, -5, -85, -54, -20, -3, -71, 7, -57},
            {-46, -85, -48, -89, -96, -7, -28, -66, -79, -47, -48, -61, 2, -21, -1, -76, -96, -28, -15, -37},
            {-59, -18, -63, -86, 9, -8, -65, -97, -23, 7, -41, -85, -60, -31, -54, -16, -17, -85, 2, -53},
            {-92, -53, -88, -96, -84, 1, -2, -76, -14, -57, -47, -34, -40, -67, -42, -68, -85, -74, -99, -57},
            {-35, 0, 1, 0, 9, -100, -89, -82, -22, -1, -99, -32, -33, -77, 10, -13, -44, -54, -69, -51},
            {-78, -80, -90, -4, -12, 2, -27, -71, -27, 3, -82, -65, -43, -10, -42, -67, -2, -61, -60, -82},
            {-18, 5, -91, -23, -21, -61, -33, -23, 3, -82, -88, -95, -17, -70, -62, -53, -16, -22, -26, -41},
            {1, -97, -44, 3, -22, -76, -29, -44, -21, -87, -4, -37, -2, -1, -39, -55, -80, -67, -18, -62},
            {-40, -78, -85, -98, -42, -14, -97, -42, -22, 0, -80, -12, -44, -54, -61, -18, -62, -68, -95, -68},
            {-37, -2, -35, -87, -58, -18, -6, 8, -83, -91, -57, -78, 9, -52, -58, -76, -100, 5, -52, -16},
            {8, -89, -7, -75, -68, -71, 7, -93, -47, -96, -45, -13, -57, 7, -82, -9, -34, -26, -58, -51},
            {-81, -5, -25, -35, -96, -13, -18, -65, -96, 4, -41, -51, -62, -24, -77, -36, -72, 10, -52, -21},
            {-91, -65, -5, -1, -45, -47, -59, -8, -38, -41, -42, -72, -30, -100, -17, 9, -49, -73, -13, 5}};
        // int i=0,j=0;
        dp= new int[A.length][A[0].length];
        // for(int i=0;i<dp.length;i++){
        //     Arrays.fill(dp[i],-1);
        // }

        // System.out.print(A.length+"\t"+A[0].length);
 
        dp[A.length-1][A[0].length-1]=(A[A.length-1][A[0].length-1]<0)?-A[A.length-1][A[0].length-1]+1:1;
        // dp[A.length-1][A[0].length-1]=(A[A.length-1][A[0].length-1]<0)?-A[A.length-1][A[0].length-1]+1:A[A.length-1][A[0].length-1];
        //for last col
        for(int i=A.length-2;i>=0;i--){
            dp[i][A[0].length-1]=Math.max(1, dp[i+1][A[0].length-1]-A[i][A[0].length-1]);
        }

        for(int i=A[0].length-2;i>=0;i--){
            dp[A.length-1][i]=Math.max(1,dp[A.length-1][i+1]-A[A.length-1][i]);
        }


        for(int i=A.length-2;i>=0;i--){
            for(int j=A[0].length-2;j>=0;j--){
                dp[i][j]=Math.max(1,Math.min(dp[i+1][j],dp[i][j+1])-A[i][j]);
            }
        }
        for(int i=0;i<A.length;i++){
            System.out.println(Arrays.toString(dp[i]));
        }

        //System.out.print(ways(A.length,A[0].length));
        // for(int i=0;i<dp.length;i++){
        //     System.out.println(Arrays.toString(dp[i]));
        // }
        // int sum = 0;
        // while(i<A.length && j<A[0].length){
        //      if(i+1<A.length && j+1<A[0].length){
        //         sum+=A[i][j]+Math.min(A[i][j+1],A[i+1][j]);
        //     } 
        //     i++;j++;
        // }

        // System.out.print(sum);

    }
    
}
